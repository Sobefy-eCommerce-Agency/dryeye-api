service: dryeye-app-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: us-east-1
  profile: dryeyerescue

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    patients_table: ${env:TABLE_PATIENTS}
    doctors_table: ${env:TABLE_DOCTORS}
    my_doctors_table: ${env:TABLE_MY_DOCTORS}
    practices_table: ${env:TABLE_PRACTICES}
    webhook_verify_hash: ${env:SHOPIFY_WEBHOOK_VERIFY_HASH}
    services_and_treatments_table: dryeye-services-and-treatments
    refersion_host: ${env:REFERSION_HOST}
    refersion_graphql_host: ${env:REFERSION_GRAPHQL_HOST}
    refersion_graphql_api_key: ${env:REFERSION_GRAPHQL_KEY}
    refersion_public_key: ${env:REFERSION_PUBLIC_KEY}
    refersion_secret_key: ${env:REFERSION_SECRET_KEY}
    sobefy_internal_key: ${env:SOBEFY_INTERNAL_KEY}

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  create:
    handler: create.main
    events:
      - http:
          path: patients
          method: post
          cors: true
  get:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /notes/{id}
    # - method: GET request
    handler: get.main
    events:
      - http:
          path: patients/{id}
          method: get
          cors: true
  search:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /notes/{id}
    # - method: GET request
    handler: search.main
    events:
      - http:
          path: patients/search
          method: get
          cors: true
  list:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /notes
    # - method: GET request
    handler: list.main
    events:
      - http:
          path: patients
          method: get
          cors: true
  update:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /notes/{id}
    # - method: PUT request
    handler: update.main
    events:
      - http:
          path: patients/update
          method: put
          cors: true
  delete:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /notes/{id}
    # - method: DELETE request
    handler: delete.main
    events:
      - http:
          path: patients/delete
          method: delete
          cors: true
  webhook-customers-create:
    handler: handlers/webhooks/customer/createCustomer.main
    events:
      - http:
          path: webhooks/customer/create-customer
          method: post
          cors: true
  webhook-customers-update:
    handler: handlers/webhooks/customer/updateCustomer.main
    events:
      - http:
          path: webhooks/customer/update-customer
          method: post
          cors: true
  webhook-customers-delete:
    handler: handlers/webhooks/customer/deleteCustomer.main
    events:
      - http:
          path: webhooks/customer/delete-customer
          method: post
          cors: true
  doctors-get:
    handler: handlers/doctors/getDoctor.main
    events:
      - http:
          path: doctors
          method: get
          cors: true
  doctors-create:
    handler: handlers/doctors/createDoctor.main
    events:
      - http:
          path: doctors
          method: post
          cors: true
  my-doctors-list:
    handler: handlers/myDoctors/list.main
    events:
      - http:
          path: my-doctors
          method: get
          cors: true
  my-doctors-create:
    handler: handlers/myDoctors/create.main
    events:
      - http:
          path: my-doctors
          method: post
          cors: true
  my-doctors-update:
    handler: handlers/myDoctors/update.main
    events:
      - http:
          path: my-doctors
          method: put
          cors: true
  my-doctors-delete:
    handler: handlers/myDoctors/delete.main
    events:
      - http:
          path: my-doctors
          method: delete
          cors: true
  # PRACTICES
  practice-get:
    handler: handlers/practices/get.main
    events:
      - http:
          path: practice
          method: get
          cors: true
  practices-list:
    handler: handlers/practices/list.main
    events:
      - http:
          path: practices
          method: get
          cors: true
  practices-create:
    handler: handlers/practices/create.main
    events:
      - http:
          path: practices
          method: post
          cors: true
  practices-update:
    handler: handlers/practices/update.main
    events:
      - http:
          path: practices
          method: put
          cors: true
  practices-delete:
    handler: handlers/practices/delete.main
    events:
      - http:
          path: practices
          method: delete
          cors: true
  # CUSTOMERS
  customers-list:
    handler: handlers/customers/list.main
    events:
      - http:
          path: customers
          method: get
          cors: true
  # SERVICES & TREATMENTS
  services-and-treatments-list:
    handler: handlers/servicesAndTreatments/list.main
    events:
      - http:
          path: services-and-treatments
          method: get
          cors: true
  services-and-treatments-create:
    handler: handlers/servicesAndTreatments/create.main
    events:
      - http:
          path: services-and-treatments
          method: post
          cors: true
  services-and-treatments-update:
    handler: handlers/servicesAndTreatments/update.main
    events:
      - http:
          path: services-and-treatments
          method: put
          cors: true
  services-and-treatments-delete:
    handler: handlers/servicesAndTreatments/delete.main
    events:
      - http:
          path: services-and-treatments
          method: delete
          cors: true
  # REFERSION
  # REFERSION - Affiliates
  refersion-affiliates-check:
    handler: handlers/refersion/affiliates/check.main
    events:
      - http:
          path: affiliates/check
          method: post
          cors: true
  refersion-affiliates-single-sign-on:
    handler: handlers/refersion/affiliates/singleSignOn.main
    events:
      - http:
          path: affiliates/single-sign-on
          method: post
          cors: true
  refersion-create-affiliates:
    handler: handlers/refersion/affiliates/createAffiliates.main
    timeout: 240
    events:
      - http:
          path: affiliates/create
          method: post
          cors: true

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
